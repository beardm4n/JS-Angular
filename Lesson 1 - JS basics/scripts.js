'use strict';
/*
===============================================================
Task #1
===============================================================
*/

let tC = prompt('Enter the Celsius temperature °C'),
    tF = Math.floor(((9 / 5) * tC + 32) * 100) / 100;

alert(`The Fahrenheit temperature is ${tF} F`);

/*
===============================================================
Task #2
===============================================================
*/

let name = 'Василий',
    admin = name;

console.log(`Admin's name is ${admin}`);
alert(`Admin's name is ${admin}`);

/*
===============================================================
Task #3
===============================================================
*/

/* выражение 1000 + '108' будет равно '1000108', так как при
   конкатенации числа со строкой JS превращает число в строку.
   На выходе получаем строку.
*/

/*
===============================================================
Task #4
===============================================================
*/

/*
   1. defer
   Атрибут defer говорит о том, что скрипт загружается в фоном режиме
      и будет запущен когда полностью загрузиться.
   Скрипты с defer никогда не блокирую страницу.
   Скрипты с defer всегда выполняются, когда дерево DOM готово, но до
      события DOMContentLoaded.
   Событие DOMContentLoaded подождет когда будет загружен и выполнен
      скрипт, только тогда будет сгенерированно.
   Отложенные с помощью defer скрипты сохраняют порядок относительно
      друг друга, как и обычные скрипты. Поэтому если будут два скрипта
      с последовательностью: один большой - long.js, затем другой -
      маленький - small.js, то загружаться браузером они будут оба параллельно,
      для увеличения производительности, и, скорей всего, small.js скачается
      первым, но выполнится последним, так как в очереди стоит вторым, потому
      что спецификация требует последовательного выполнения скриптов
      согласно порядку в документе.

   2. async
   Атрибут async означает, что скрипт абсолютно независим.
   Страница не ждет асинхронных скриптов, а сразу же
      загружается и отображается.
   Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
      - Событие DOMContentLoaded может произойти как до асинхронного скрипта
        (асинхронный скрипт завершит свою загрузку после того, как загрузится
        страница), так и после (скрипт короткий или содержится в HTTP-кеше).
      - Остальные скрипты не ждут async, и скрипты с async не ждут другие скрипты.
   Если имеются несколько скриптов с async, они могут выполнится в любом порядке.
      То, что загрузится быстрей - запустится в первую очередь.
   Содерживое страницы отображается сразу же: async не блокирует загрузку.
   DOMContentLoaded может произойти как до, так и после async, никаких гарантий нет.
   Асинхронные скрипты не ждут друг друга. Если скрипт small.js идет вторым после
      long.js, то он, скорее всега, загрузится раньше, пожтому и запуститься первым.
   На практике defer используется для скриптов, которым требуется доступ ко
      всему DOM и/или важен их относительный порядок выполнения.
   А async хорош для независимых скриптов, например счётчиков и рекламы, относительный
      порядок выполнения которых не играет роли.
*/
