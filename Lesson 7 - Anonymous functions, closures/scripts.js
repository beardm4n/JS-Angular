// 1. Продумать, где можно применить замыкания.
/*
Замыкания можно использовать для объявления переменных для того, чтобы не засорять глобальную область видимости.
Можно создавать приватные значения объекта (хэш-таблиц), которые не будут доступны вне функции.
*/

// 2. Не выполняя код, ответить, что выведет браузер и почему:
/*
=====================================
a.

if (!("a" in window)) {
   var a = 1;
}
alert(a);

выведет undefined. потому что из-за объявление через var переменная 'а' поднимется в глобальную область видимости.
а условие "a" in window даст true так "а" будет проиницализированна, но так как у нас имеется отрицание условия
оно не выполнится и "а" не будет присвоенна 1. она останется неприсвоенной - undefined.

=====================================
b.

var b = function a(x) {
x && a(--x);
};
alert(a);

будет ошибка, потому что функцию можно и нужно вызывать через присвоенную переменную b.
=====================================
c.

function a(x) {
return x * 2;
}
var a;
alert(a);

выведет undefined потому что переменной "а" ничего не присвоенно. а функция "а" не вызвана
=====================================
d.

function b(x, y, a) {
arguments[2] = 10;
alert(a);
}
b(1, 2, 3);

выдаст ошибку, потому что при вызове функции с числовыми аргументами произойдет присвоение числа числу, что невозможно
=====================================
e. *

function a() {
alert(this);
}
a.call(null);

первый аргумент метода call становится this'ом функции, то есть null. выдаст null, так как в строгом режиме call/apply
передают this "как есть".

 */